---
title: Index
layout: api-server
---

<h1>Server API Documentation</h1>
<p>
  The OS.js server is really simple. It consists of Core API (internal functions), Application API (application functions) and VFS (filesystem functions).
</p>
<%= partial "docheader" %>

<img alt="Server API graph" style="max-width:100%" src="/images/dia-server-api.png" />

<h2>HTTP API Requests</h2>
<div class="indent">
  <pre>POST //osjs-host.net/API/{method}</pre>
  <pre>POST //osjs-host.net/FS/{method}</pre>

  Request example:
  <pre class="code">
{
  "arg": "value"
}
  </pre>

  Responds with:
  <pre class="code">
{
  "error": null, // String if error
  "result": null
}
  </pre>
</div>

<h2>HTTP File Requests</h2>
<div class="indent">

  <h3>Resources</h3>

  Should be handleded by the web-server normally. You just serve files from <i>dist</i> or <i>dist-dev</i> directory.

  Example request:
  <pre>GET //osjs-host.net/{path}</pre>

  Example Response:
  <pre class="code">
Content-Length:7196
Content-Type:text/plain; charset=utf-8

[RAW FILE DATA]
  </pre>

  <h3>Downloading</h3>

  <p>
    OS.js expects a raw file return.
  </p>

  <p>Example Request:</p>
  <pre>GET //osjs-host.net/FS/get/{vfs-path}</pre>

  <p>Example Response:</p>
  <pre class="code">
Content-Length:7196
Content-Type:text/plain; charset=utf-8

[RAW FILE DATA]
  </pre>

  <h3>Uploading</h3>

  <pre>POST //osjs-host.net/FS/upload</pre>

  With form data (multipart/form-data)
  <pre class="code">
path: /upload/path
upload: FILE</pre>

</div>
